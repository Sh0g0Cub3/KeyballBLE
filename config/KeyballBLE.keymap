#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R            &kp T                                                   &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F            &kp G      &kp LC(LG(T))      &kp LA(LC(TAB))           &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z      &kp X         &kp C         &kp V            &kp B      &mo 4              &lt 6 LG(SPACE)           &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 BACKSPACE  &lt 3 TAB  &lt 5 SPACE        &mt LEFT_SHIFT LC(SPACE)  &lt 2 ENTER                             &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Mouse {
            bindings = <
&none   &none      &none          &none         &none                                             &none                  &kp LA(LG(LEFT_ARROW))  &none  &kp LA(LG(RIGHT_ARROW))  &none
&none   &kp LCTRL  &kp LEFT_ALT   &kp LEFT_GUI  &kp LEFT_SHIFT  &none       &none                 &none                  &mkp LCLK               &none  &mkp RCLK                &none
&none   &none      &kp LA(LG(C))  &none         &none           &none       &none                 &kp LS(LG(NUMBER_3))   &none                   &none  &none                    &none
&trans  &trans     &trans         &trans        &trans          &trans      &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)                                                          &trans
            >;
        };

        Arrow {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4   &kp N5                               &kp NUMBER_6       &kp NUMBER_7           &kp N8         &kp NUMBER_9     &kp NUMBER_0
&none         &none         &none             &none          &none          &none       &kp HOME  &kp LEFT_ARROW     &kp DOWN_ARROW         &kp UP_ARROW   &kp RIGHT_ARROW  &kp LC(LG(C))
&none         &none         &kp LG(NUMBER_0)  &kp LG(MINUS)  &kp LG(EQUAL)  &none       &kp END   &kp LA(LC(SPACE))  &kp LS(LA(LC(SPACE)))  &kp LS(LA(J))  &none            &none
&trans        &trans        &trans            &trans         &trans         &trans      &trans    &trans                                                                    &trans
            >;
        };

        Symbol {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)                                 &kp LS(LPAR)   &kp LS(RPAR)  &kp BACKSLASH  &none       &none
&kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(UNDER)  &kp GRAVE      &none          &kp LBKT       &kp RBKT      &kp LS(PIPE)   &none       &none
&kp LS(DQT)    &kp SQT        &kp EQUAL     &kp LS(PLUS)   &kp MINUS      &none          &none          &kp LS(LBRC)   &kp LS(RBRC)  &kp LS(LT)     &kp LS(GT)  &none
&trans         &trans         &trans        &trans         &trans         &trans         &kp LA(ENTER)  &kp LS(ENTER)                                           &trans
            >;
        };

        Num {
            bindings = <
&none   &none          &none   &none          &none                                         &kp MINUS      &kp N7  &kp N8  &kp N9  &kp LC(LG(P))
&none   &kp LC(LG(S))  &none   &kp LC(LG(F))  &none              &none              &none   &kp LS(COLON)  &kp N4  &kp N5  &kp N6  &kp LS(STAR)
&none   &none          &none   &kp LC(LG(V))  &kp LC(LG(B))      &none              &kp N0  &kp DOT        &kp N1  &kp N2  &kp N3  &kp FSLH
&trans  &trans         &trans  &trans         &kp LS(LC(LG(B)))  &kp LG(SPACE)      &trans  &trans                                 &trans
            >;
        };

        Display {
            bindings = <
&none   &kp LA(LC(N))      &kp LA(LC(C))      &kp LA(LC(E))      &kp LA(LC(M))                         &kp LC(UP_ARROW)        &kp LC(LG(U))       &kp LC(LG(I))  &none                    &kp LS(LC(LG(D)))
&none   &kp LA(LC(T))      &kp LA(LC(S))      &kp LA(LC(B))      &kp LA(LC(F))      &none       &none  &kp LC(LG(LEFT_ARROW))  &kp LC(LG(J))       &kp LC(LG(K))  &kp LC(LG(RIGHT_ARROW))  &kp LS(LC(LG(J)))
&none   &kp LS(LA(LC(F)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(P)))  &kp LS(LA(LC(D)))  &none       &none  &kp LC(LG(COMMA))       &kp LC(LG(PERIOD))  &none          &none                    &none
&trans  &trans             &trans             &trans             &trans             &trans      &none  &kp LC(LG(ENTER))                                                                   &trans
            >;
        };

        Function {
            bindings = <
&none   &none          &none   &none          &none                                         &kp F1  &kp F2   &kp F3   &kp F4   &kp LC(LG(P))
&none   &kp LC(LG(S))  &none   &kp LC(LG(F))  &none          &none                  &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&none   &none          &none   &kp LC(LG(V))  &kp LC(LG(B))  &none                  &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
&trans  &trans         &trans  &trans         &trans         &kp LS(LC(LG(B)))      &trans  &trans                             &trans
            >;
        };

        RowNum {
            bindings = <
&none            &none            &none            &kp ASTERISK     &kp SLASH                              &kp BACKSPACE    &none            &none            &none            &none
&kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &none          &none  &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0
&none            &none            &kp EQUAL        &kp PLUS         &kp MINUS        &none          &none  &kp PERIOD       &kp COMMA        &none            &none            &none
&none            &none            &none            &none            &kp LEFT_GUI     &kp SPACE      &none  &none                                                               &none
            >;
        };

        Bluetooth {
            bindings = <
&none  &none  &none  &none  &none                             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none  &none  &none  &none  &none      &studio_unlock  &none         &none         &none         &none         &none
&none  &none  &none  &none  &none  &none      &bootloader     &none         &none         &none         &none         &bt BT_CLR
&none  &none  &none  &none  &none  &none      &none           &none                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
